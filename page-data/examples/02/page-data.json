{"componentChunkName":"component---src-templates-example-js","path":"/examples/02","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://github.com/talex5/ocurrent/blob/master/examples/build_matrix.ml\">build_matrix.ml</a> contains a slightly more advanced pipeline:</p>\n<p><img src=\"/example2.svg\" alt=\"example2\"></p>\n<pre><code class=\"language-ocaml\">let weekly = Current_cache.Schedule.v ~valid_for:(Duration.of_day 7) ()\n\n(* Run \"docker build\" on the latest commit in Git repository [repo]. *)\nlet pipeline ~repo () =\n  let src = Git.Local.head_commit repo in\n  let base = Docker.pull ~schedule:weekly \"ocaml/opam2\" in\n  let build ocaml_version =\n    let dockerfile =\n      let+ base = base in\n      dockerfile ~base ~ocaml_version\n    in\n    Docker.build ~label:ocaml_version ~pull:false ~dockerfile src |>\n    Docker.tag ~tag:(Fmt.strf \"example-%s\" ocaml_version)\n  in\n  Current.all [\n    build \"4.07\";\n    build \"4.08\"\n  ]\n</code></pre>\n<p>The <code>Docker.pull</code> step shows the use of a <em>schedule</em>. In this case, we consider\na pulled image to be valid for one week; after that OCurrent will automatically\nrun the <code>docker pull</code> again to check for newer versions.</p>\n<p>It uses <code>Current.all</code> to build against different versions of OCaml, generating\na suitable Dockerfile for each version (the <code>ocaml/opam2</code> image contains multiple\nversions of the compiler and the Dockerfile just selects one of them).</p>\n<p>The generated images are then tagged with the compiler version used to build them.</p>","frontmatter":{"title":"buildÂ matrix"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}