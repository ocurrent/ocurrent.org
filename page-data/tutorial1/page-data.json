{"componentChunkName":"component---src-templates-example-js","path":"/tutorial1","result":{"data":{"markdownRemark":{"html":"<p>This monitors a local Git repository (<code>repo</code>), from which it gets the current\nhead commit. It copies it to a temporary clone and builds it with <code>docker build /path/to/clone</code>, then executes the example with <code>--help</code> to check that it runs.</p>\n<pre><code class=\"language-bash\">$ git clone https://github.com/talex5/ocurrent.git\n$ cd ocurrent/\n$ dune exec -- ./examples/docker_build_local.exe .\n[...]\n    current [INFO] Evaluation complete:\n                     Result: Pending\n                     Watching: [/home/user/ocurrent/#refs/heads/master;\n                                HEAD(/home/user/ocurrent/)]\n[...]\ncurrent.docker [INFO] Build of docker image \"build-of-d75e33fd875d80cd8e0cddf83904dd6d7aea12d3\" succeeded\n[...]\n    current [INFO] Evaluation complete:\n                     Result: Ok ()\n                     Watching: [/home/user/ocurrent/#refs/heads/master;\n                                HEAD(/home/user/ocurrent/)]\n</code></pre>\n<p>If you make a new commit or change branch (e.g. <code>git checkout -b test HEAD~1</code>) then OCurrent will\nnotice and build it again.</p>\n<p>The example code above works mostly with values of type <code>'a Current.t</code>.\nFor example, <code>Docker.build</code> takes a source current and returns a Docker image current.\nIf you have a function that works on concrete values then you can use <code>Current.map</code>\n(or the <code>let+</code> syntax) to make it work on currents instead.</p>\n<p>You can also use <code>Current.bind</code> (or the <code>let*</code> syntax) if you can only decide\nwhat the next part of the pipeline should be by looking at a concrete input.\nHowever, using <code>bind</code> limits OCurrent's ability to analyse the pipeline,\nbecause it must wait for the input to be ready before knowing what happens\nnext.</p>\n<p>OCurrent has a small core language (in <code>lib</code> and <code>lib_term</code>), but most\nfunctionality is added by external libraries. See the <a href=\"https://github.com/talex5/ocurrent/blob/master/plugins\">plugins</a> directory for\nsome examples.</p>\n<p>The example also runs a minimal web UI on port 8080 (use <code>--port=...</code> to change it),\nshowing the state of the system. You will need to have <a href=\"https://graphviz.org/\">graphviz</a> installed in order\nto see the diagrams.</p>\n<p><img src=\"/example1.svg\" alt=\"example1\"></p>\n<p>A green box indicates a pipeline stage that succeeded, orange means\nin-progress, grey means cannot be started yet (inputs not ready),\nyellow means queued or waiting for permission to start, and red means failed.</p>\n<p>Clicking on a box shows the log for that operation (though not all operations\nhave logs; <code>head commit</code> doesn't, for example).</p>","frontmatter":{"title":"docker build local"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}